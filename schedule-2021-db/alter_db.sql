START TRANSACTION;

CREATE SCHEMA IF NOT EXISTS schema_schedule;
SET search_path = "schema_schedule";

DROP TABLE IF EXISTS DEPARTMENT_SPECIALIZATION CASCADE;
CREATE TABLE DEPARTMENT_SPECIALIZATION (
    ID SERIAL PRIMARY KEY,
    DEPARTMENT_ID INTEGER REFERENCES DEPARTMENT (ID) ON DELETE CASCADE NOT NULL,
    SPECIALIZATION_ID INTEGER REFERENCES specialization (ID) ON DELETE CASCADE NOT NULL
);

ALTER TABLE faculty ADD IF NOT EXISTS SHORT TEXT NOT NULL DEFAULT '';

ALTER TABLE specialization DROP COLUMN IF EXISTS department_id;

ALTER TABLE "GROUP" ADD IF NOT EXISTS API_ID INTEGER NOT NULL DEFAULT 0;
ALTER TABLE "GROUP" ADD IF NOT EXISTS LEVEL INTEGER NOT NULL DEFAULT 0;
ALTER TABLE "GROUP" ADD IF NOT EXISTS TYPE TEXT NOT NULL DEFAULT '';
ALTER TABLE "GROUP" ADD IF NOT EXISTS ORIGIN INTEGER NOT NULL DEFAULT 0;
ALTER TABLE "GROUP" ADD IF NOT EXISTS YEAR INTEGER NOT NULL DEFAULT 0;
ALTER TABLE "GROUP" DROP COLUMN IF EXISTS specialization_id;
ALTER TABLE "GROUP" ADD IF NOT EXISTS DEPARTMENT_SPECIALIZATION_ID  INTEGER REFERENCES DEPARTMENT_SPECIALIZATION (ID) ON DELETE CASCADE;

ALTER TABLE subject ADD IF NOT EXISTS LECTURES_AMOUNT INTEGER;
ALTER TABLE subject ADD IF NOT EXISTS LAB_AMOUNT INTEGER;
ALTER TABLE subject ADD IF NOT EXISTS PRACTICE_AMOUNT INTEGER;
ALTER TABLE subject ADD IF NOT EXISTS HOMEWORK_AMOUNT INTEGER;
ALTER TABLE subject DROP COLUMN IF EXISTS specialization_id;

ALTER TABLE teacher ADD IF NOT EXISTS API_ID INTEGER NOT NULL DEFAULT 0;

ALTER TABLE lesson ADD IF NOT EXISTS TIME_START TEXT NOT NULL DEFAULT '00:00';
ALTER TABLE lesson ADD IF NOT EXISTS TIME_END TEXT NOT NULL DEFAULT '00:00';

DROP TABLE IF EXISTS SUBJECT_TYPE CASCADE;
CREATE TABLE SUBJECT_TYPE (
    ID SERIAL PRIMARY KEY,
    NAME TEXT NOT NULL
);

ALTER TABLE subject ADD IF NOT EXISTS SUBJECT_TYPE_ID INTEGER REFERENCES SUBJECT_TYPE (ID) ON DELETE CASCADE NOT NULL DEFAULT 0;

ALTER TABLE deadline ADD IF NOT EXISTS student_id INTEGER REFERENCES student (id) ON DELETE CASCADE;

DROP TABLE IF EXISTS PROFILE CASCADE;
CREATE TABLE PROFILE (
    ID SERIAL PRIMARY KEY,
    SPECIALIZATION_ID INTEGER REFERENCES SPECIALIZATION (ID) ON DELETE CASCADE NOT NULL,
    NAME TEXT NOT NULL
);

DROP TABLE IF EXISTS PROFILE_SUBJECT;
CREATE TABLE PROFILE_SUBJECT (
    ID SERIAL PRIMARY KEY,
    PROFILE INTEGER REFERENCES PROFILE (ID) ON DELETE CASCADE NOT NULL,
    SUBJECT INTEGER REFERENCES subject (ID) ON DELETE CASCADE NOT NULL
 );

DROP TABLE IF EXISTS SEMESTER CASCADE;
CREATE TABLE SEMESTER (
    ID SERIAL PRIMARY KEY,
    STUDENT_ID INTEGER REFERENCES student (ID) ON DELETE CASCADE NOT NULL,
    LEVEL INTEGER NOT NULL
);

DROP TABLE IF EXISTS PROGRESS CASCADE;
CREATE TABLE PROGRESS (
    ID SERIAL PRIMARY KEY,
    SEMESTER_ID INTEGER REFERENCES SEMESTER (ID) ON DELETE CASCADE NOT NULL,
    SUBJECT_ID INTEGER REFERENCES subject (ID) ON DELETE CASCADE NOT NULL
);

DROP TABLE IF EXISTS TASK_TYPE CASCADE;
CREATE TABLE TASK_TYPE (
    ID SERIAL PRIMARY KEY,
    NAME TEXT NOT NULL
);

DROP TABLE IF EXISTS TASK;
CREATE TABLE TASK (
    ID SERIAL PRIMARY KEY,
    PROGRESS_ID INTEGER REFERENCES PROGRESS (ID) ON DELETE CASCADE NOT NULL,
    TYPE_ID INTEGER REFERENCES TASK_TYPE (ID) ON DELETE CASCADE NOT NULL,
    RESULT TEXT NOT NULL
);

ALTER TABLE student ADD IF NOT EXISTS password TEXT;
ALTER TABLE student ADD IF NOT EXISTS role TEXT NOT NULL DEFAULT 'STUDENT';

ALTER TABLE deadline ADD IF NOT EXISTS group_id INTEGER REFERENCES "GROUP" (id) ON DELETE CASCADE;
-- UPDATE deadline SET group_id = (SELECT id FROM "GROUP" ORDER BY random() LIMIT 1)
-- where id = (select id from deadline order by random() limit 1);

ALTER TABLE "GROUP" ADD IF NOT EXISTS faculty_id INTEGER REFERENCES faculty (id) ON DELETE CASCADE;

COMMIT;
